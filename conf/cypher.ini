[cvs_reposity]
    [cvs_reposity.get_users_cvs]
        cypher_count= "match (u:user) - [:has_cv] -> (cv:curriculum_vitae) where u.uid = {uid} return count(*)"

        cypher_pageable ="""match (u:user) - [:has_cv] ->(cv:curriculum_vitae) 
                        where u.uid = {uid} 
                        return cv.cv_id,cv.cv_name,cv.cview_pwd,cv.custom_domainname,cv.cvisibili_type,cv.cv_createtime,cv.cv_updatetime 
                        order by cv.cv_updatetime desc 
                        skip {offset} 
                        limit {limit}"""

    [cvs_reposity.reset_cvtemp]
        cypher = """match (u:user) - [:has_cv] ->(cv:curriculum_vitae) - [r:include_cvt] -> (),(cvt:cv_template) 
                    where u.uid = {uid} and cv.cv_id = {cvid} and cvt.cvt_id = {cvtid} 
                    create (cv) - [:include_cvt] -> (cvt) delete r"""

    [cvs_reposity.createcv_with_temp]
        cypher = """match (u:user),(cvt:cv_template) 
                    where u.uid = {uid} and cvt.cvt_id = {cvtid} 
                    create (u) - [:has_cv] ->(cv:curriculum_vitae{
                                                cv_id:{cv_id},
                                                cv_name:{cv_name},
                                                cv_createtime:{cv_createtime},
                                                cv_updatetime:{cv_updatetime}}) - [:include_cvt] -> (cvt)"""

[cvt_reposity]
    [cvt_reposity.is_exist]
        cypher = "match (n:cv_template) where n.cvt_id={cvt_id} return count(*)"

    [cvt_reposity.create_new_cvt]
        cypher = """create (p:cv_template {
                            cvt_id:{cvt_id}, 
                            cvt_no:{cvt_no}, 
                            cvt_name:{cvt_name},
                            cvt_fmt:{cvt_fmt}, 
                            cvt_size:{cvt_size}, 
                            cvt_language:{cvt_language}, 
                            cvt_color:{cvt_color}, 
                            cvt_imgpath:{cvt_imgpath}, 
                            cvt_csspath:{cvt_csspath},
                            cvt_createtime:{cvt_createtime},
                            cvt_updatetime:{cvt_updatetime}}) """

    [cvt_reposity.update_new_cvt]
        cypher = """match (n:cv_template) 
            where n.cvt_id={cvt_id} 
            set n.cvt_no = {cvt_no},
                n.cvt_name = {cvt_name},
                n.cvt_fmt = {cvt_fmt}, 
                n.cvt_size = {cvt_size}, 
                n.cvt_language = {cvt_language}, 
                n.cvt_color = {cvt_color}, 
                n.cvt_imgpath = {cvt_imgpath}, 
                n.cvt_csspath = {cvt_csspath},
                n.cvt_updatetime = {cvt_updatetime}"""

    [cvt_reposity.get_all_cvts]
        cypher_count = "match (n:cv_template) return count(*)"

        cypher_pageable = """match (n:cv_template) 
                            return n.cvt_id,n.cvt_no,n.cvt_name,n.cvt_fmt,n.cvt_size,n.cvt_language,n.cvt_color,n.cvt_imgpath,n.cvt_csspath,n.cvt_createtime,n.cvt_updatetime 
                            skip {offset} 
                            limit {limit}"""

[users_repository]
    [users_repository.get_user_for_auth]
        cypher = "match (n:user) where n.name={name} and n.pwd={pwd} return n.uid,n.name,n.pwd"

    [users_repository.is_exist]
        cypher = "match (n:user) where n.name={name} return n"

    [users_repository.create_user]
        cypher = "create (n:user {uid:{uid}, name:{name},pwd:{pwd},create_time:{create_time}})"

    [users_repository.get_all_users]
        cypher_count = "match (n:user) return count(*)"
        cypher_pageable = "match (n:user) return n.uid,n.name,n.pwd,n.create_time skip {offset} limit {limit}"